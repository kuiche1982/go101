// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:2
package ifxqlyacc

import __yyfmt__ "fmt"

//line sql.y:2
import (
	"fmt"
	"github.com/pkg/errors"
	"strconv"
	"time"
	"vitess.io/vitess/go/vt/log"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).query.Statements = append(yylex.(*Tokenizer).query.Statements, stmt)
}

//line sql.y:14
type yySymType struct {
	yys     int
	stmt    Statement
	stmts   Statements
	selStmt *SelectStatement
	sdbStmt *ShowDatabasesStatement
	cdbStmt *CreateDatabaseStatement
	smmStmt *ShowMeasurementsStatement
	str     string
	query   Query
	field   *Field
	fields  Fields
	sources Sources
	sortfs  SortFields
	sortf   *SortField
	ment    *Measurement
	dimens  Dimensions
	dimen   *Dimension
	int     int
	int64   int64
	float64 float64
	expr    Expr
	tdur    time.Duration
	bool    bool
}

const SELECT = 57346
const FROM = 57347
const WHERE = 57348
const AS = 57349
const GROUP = 57350
const BY = 57351
const ORDER = 57352
const LIMIT = 57353
const SHOW = 57354
const CREATE = 57355
const DATABASES = 57356
const DATABASE = 57357
const MEASUREMENTS = 57358
const COMMA = 57359
const SEMICOLON = 57360
const MUL = 57361
const EQ = 57362
const NEQ = 57363
const LT = 57364
const LTE = 57365
const GT = 57366
const GTE = 57367
const IDENT = 57368
const INTEGER = 57369
const DURATIONVAL = 57370
const STRING = 57371
const DESC = 57372
const ASC = 57373
const NUMBER = 57374
const AND = 57375
const OR = 57376

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SELECT",
	"FROM",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"SHOW",
	"CREATE",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"COMMA",
	"SEMICOLON",
	"MUL",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"DESC",
	"ASC",
	"NUMBER",
	"AND",
	"OR",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:312
type Tokenizer struct {
	query   Query
	scanner *Scanner
}

func (tkn *Tokenizer) Lex(lval *yySymType) int {
	var typ int
	var val string

	for {
		typ, _, val = tkn.scanner.Scan()
		if typ == EOF {
			return 0
		}
		if typ == MUL {
			lval.int = ILLEGAL
			//break
		}
		if typ >= EQ && typ <= GTE {
			//println("oo string is ",val)
			//lval.int,_ = strconv.Atoi(val)
			//println("oo is ",lval.int)
			lval.int = typ
			//break
		}
		if typ == NUMBER {
			lval.float64, _ = strconv.ParseFloat(val, 64)
			//break
		}
		if typ == INTEGER {
			lval.int64, _ = strconv.ParseInt(val, 10, 64)
			//break
		}
		if typ == DURATIONVAL {
			time, _ := ParseDuration(val)
			lval.tdur = time
			//break
		}
		if typ == DESC {
			lval.bool = false
			//break
		}
		if typ == AND {
			lval.int = AND
			//break
		}
		if typ == OR {
			lval.int = OR
			//break
		}
		if typ == ASC {
			lval.bool = true
			//break
		}
		if typ != WS {
			break
		}
	}
	lval.str = val
	return typ
}
func (tkn *Tokenizer) Error(err string) {
	log.Fatal(err)
}

var ErrInvalidDuration = errors.New("invalid duration")

// ParseDuration parses a time duration from a string.
// This is needed instead of time.ParseDuration because this will support
// the full syntax that InfluxQL supports for specifying durations
// including weeks and days.
func ParseDuration(s string) (time.Duration, error) {
	// Return an error if the string is blank or one character
	if len(s) < 2 {
		return 0, ErrInvalidDuration
	}

	// Split string into individual runes.
	a := []rune(s)

	// Start with a zero duration.
	var d time.Duration
	i := 0

	// Check for a negative.
	isNegative := false
	if a[i] == '-' {
		isNegative = true
		i++
	}

	var measure int64
	var unit string

	// Parsing loop.
	for i < len(a) {
		// Find the number portion.
		start := i
		for ; i < len(a) && isDigit(a[i]); i++ {
			// Scan for the digits.
		}

		// Check if we reached the end of the string prematurely.
		if i >= len(a) || i == start {
			return 0, ErrInvalidDuration
		}

		// Parse the numeric part.
		n, err := strconv.ParseInt(string(a[start:i]), 10, 64)
		if err != nil {
			return 0, ErrInvalidDuration
		}
		measure = n

		// Extract the unit of measure.
		// If the last two characters are "ms" then parse as milliseconds.
		// Otherwise just use the last character as the unit of measure.
		unit = string(a[i])
		switch a[i] {
		case 'n':
			if i+1 < len(a) && a[i+1] == 's' {
				unit = string(a[i : i+2])
				d += time.Duration(n)
				i += 2
				continue
			}
			return 0, ErrInvalidDuration
		case 'u', 'Âµ':
			d += time.Duration(n) * time.Microsecond
		case 'm':
			if i+1 < len(a) && a[i+1] == 's' {
				unit = string(a[i : i+2])
				d += time.Duration(n) * time.Millisecond
				i += 2
				continue
			}
			d += time.Duration(n) * time.Minute
		case 's':
			d += time.Duration(n) * time.Second
		case 'h':
			d += time.Duration(n) * time.Hour
		case 'd':
			d += time.Duration(n) * 24 * time.Hour
		case 'w':
			d += time.Duration(n) * 7 * 24 * time.Hour
		default:
			return 0, ErrInvalidDuration
		}
		i++
	}

	// Check to see if we overflowed a duration
	if d < 0 && !isNegative {
		return 0, fmt.Errorf("overflowed duration %d%s: choose a smaller duration or INF", measure, unit)
	}

	if isNegative {
		d = -d
	}
	return d, nil
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 76

var yyAct = [...]int{

	64, 46, 59, 37, 28, 33, 35, 38, 40, 41,
	42, 49, 50, 39, 73, 74, 52, 53, 54, 55,
	56, 57, 63, 13, 23, 66, 61, 30, 32, 25,
	14, 11, 10, 72, 71, 45, 21, 15, 7, 16,
	17, 47, 34, 1, 48, 44, 8, 9, 27, 58,
	62, 43, 22, 31, 18, 69, 67, 68, 24, 20,
	70, 65, 51, 36, 60, 26, 29, 19, 12, 6,
	3, 5, 4, 76, 75, 2,
}
var yyPact = [...]int{

	34, -1000, 14, -1000, -1000, -1000, -1000, 4, 23, 25,
	34, 54, 19, -1000, 45, -1000, 52, 3, -1000, 40,
	1, 4, 2, 32, -19, -1000, 52, 36, -1000, 18,
	-1000, -1000, -1000, 30, 35, -22, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, 32, 0, 1, -1000, -5, -1, -19,
	-19, -19, -1000, -1000, -1000, -1000, -1000, -1000, 30, -1000,
	17, -1000, -1000, -1000, -1000, 16, -16, -1000, -1000, -1000,
	-1000, 0, -1, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 75, 72, 71, 70, 69, 31, 68, 43, 67,
	4, 66, 2, 65, 64, 24, 6, 3, 63, 62,
	1, 0, 5, 61,
}
var yyR1 = [...]int{

	0, 8, 8, 8, 1, 1, 1, 1, 4, 6,
	6, 7, 7, 7, 9, 9, 10, 10, 11, 13,
	13, 12, 12, 14, 15, 15, 16, 16, 16, 18,
	19, 19, 19, 19, 19, 19, 17, 17, 17, 17,
	17, 22, 22, 21, 21, 23, 23, 23, 20, 20,
	2, 3, 5,
}
var yyR2 = [...]int{

	0, 1, 2, 3, 1, 1, 1, 1, 7, 1,
	3, 1, 1, 3, 2, 0, 1, 3, 1, 3,
	0, 1, 3, 1, 2, 0, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 3, 1, 2, 2, 2, 0,
	2, 3, 5,
}
var yyChk = [...]int{

	-1000, -8, -1, -4, -2, -3, -5, 4, 12, 13,
	18, -6, -7, 19, 26, 14, 16, 15, -8, -9,
	5, 17, 7, -15, 6, 26, -13, 8, -10, -11,
	26, -6, 26, -22, 10, -16, -18, -17, 26, 32,
	27, 28, 29, -15, 9, 17, -20, 11, 9, 33,
	34, -19, 20, 21, 22, 23, 24, 25, -22, -12,
	-14, 26, -10, 27, -21, -23, 26, -16, -16, -17,
	-20, 17, 17, 30, 31, -12, -21,
}
var yyDef = [...]int{

	0, -2, 1, 4, 5, 6, 7, 0, 0, 0,
	2, 15, 9, 11, 12, 50, 25, 0, 3, 20,
	0, 0, 0, 42, 0, 51, 25, 0, 14, 16,
	18, 10, 13, 49, 0, 24, 26, 0, 36, 37,
	38, 39, 40, 42, 0, 0, 52, 0, 0, 0,
	0, 0, 30, 31, 32, 33, 34, 35, 49, 19,
	21, 23, 17, 48, 41, 43, 45, 27, 28, 29,
	8, 0, 0, 46, 47, 22, 44,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:69
		{
			setParseTree(yylex, yyDollar[1].stmt)
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:73
		{
			setParseTree(yylex, yyDollar[1].stmt)
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:77
		{
			setParseTree(yylex, yyDollar[1].stmt)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:82
		{
			yyVAL.stmt = yyDollar[1].selStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:86
		{
			yyVAL.stmt = yyDollar[1].sdbStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:90
		{
			yyVAL.stmt = yyDollar[1].cdbStmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:94
		{
			yyVAL.stmt = yyDollar[1].smmStmt
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:101
		{
			sel := &SelectStatement{}
			sel.Fields = yyDollar[2].fields
			//sel.Target = $7
			sel.Sources = yyDollar[3].sources
			sel.Dimensions = yyDollar[4].dimens
			sel.Condition = yyDollar[5].expr
			sel.SortFields = yyDollar[6].sortfs
			sel.Limit = yyDollar[7].int
			yyVAL.selStmt = sel
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:114
		{
			yyVAL.fields = []*Field{yyDollar[1].field}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:118
		{
			yyVAL.fields = append(yyDollar[3].fields, yyDollar[1].field)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:123
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: yyDollar[1].int}}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:127
		{
			yyVAL.field = &Field{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:131
		{
			yyVAL.field = &Field{Expr: &VarRef{Val: yyDollar[1].str}, Alias: yyDollar[3].str}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:136
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:140
		{
			yyVAL.sources = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:145
		{
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:149
		{
			yyVAL.sources = append(yyDollar[3].sources, yyDollar[1].ment)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:154
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:159
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:163
		{
			yyVAL.dimens = nil
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:168
		{
			yyVAL.dimens = []*Dimension{yyDollar[1].dimen}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:172
		{
			yyVAL.dimens = append(yyDollar[3].dimens, yyDollar[1].dimen)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:177
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:182
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:186
		{
			yyVAL.expr = nil
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:191
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:195
		{
			yyVAL.expr = &BinaryExpr{Op: yyDollar[2].int, LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:199
		{
			yyVAL.expr = &BinaryExpr{Op: yyDollar[2].int, LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:204
		{
			yyVAL.expr = &BinaryExpr{Op: yyDollar[2].int, LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:209
		{
			yyVAL.int = yyDollar[1].int
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:213
		{
			yyVAL.int = yyDollar[1].int
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:217
		{
			yyVAL.int = yyDollar[1].int
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:221
		{
			yyVAL.int = yyDollar[1].int
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:225
		{
			yyVAL.int = yyDollar[1].int
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:229
		{
			yyVAL.int = yyDollar[1].int
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:234
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:238
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:242
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:246
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:250
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:255
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:259
		{
			yyVAL.sortfs = nil
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:264
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:268
		{
			yyVAL.sortfs = append(yyDollar[3].sortfs, yyDollar[1].sortf)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:273
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:277
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: yyDollar[2].bool}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:281
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: yyDollar[2].bool}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:286
		{
			yyVAL.int = int(yyDollar[2].int64)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:290
		{
			yyVAL.int = 0
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:295
		{
			yyVAL.sdbStmt = &ShowDatabasesStatement{}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:300
		{
			yyVAL.cdbStmt = &CreateDatabaseStatement{Name: yyDollar[3].str}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:305
		{
			sms := &ShowMeasurementsStatement{}
			sms.Condition = yyDollar[3].expr
			sms.SortFields = yyDollar[4].sortfs
			sms.Limit = yyDollar[5].int
			yyVAL.smmStmt = sms
		}
	}
	goto yystack /* stack new state and value */
}
