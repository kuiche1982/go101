// Code generated by goyacc -o pm.go -p Cal pm.y. DO NOT EDIT.

//line pm.y:3
package main

import __yyfmt__ "fmt"

//line pm.y:3
import (
	"bufio"
	"fmt"
	"os"
	"unicode"
)

var Result = 0

//line pm.y:12
type CalSymType struct {
	yys int
	val int
}

const NUMBER = 57346

var CalToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"'+'",
	"'-'",
}
var CalStatenames = [...]string{}

const CalEofCode = 1
const CalErrCode = 2
const CalInitialStackSize = 16

//line pm.y:34

func Add(a, b int) int {
	return a + b
}
func Minus(a, b int) int {
	return a - b
}

type CalLex struct {
	s   string
	pos int
}

func (l *CalLex) Lex(lval *CalSymType) int {
	var c rune = ' '
	for c == ' ' {
		if l.pos == len(l.s) {
			return 0
		}
		c = rune(l.s[l.pos])
		l.pos += 1
		if c == '+' || c == '-' {
			return int(c)
		}
		if unicode.IsDigit(c) {
			lval.val = int(c - '0')
			return NUMBER
		}
	}
	return 0
}

func (l *CalLex) Error(s string) {
	fmt.Printf("syntax error: %s\n", s)
}

func main() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))

	for {
		var eqn string
		var ok bool

		fmt.Printf("equation: ")
		if eqn, ok = readline(fi); ok {
			Result = 0
			CalParse(&CalLex{s: eqn})
			fmt.Println(Result)
		} else {
			break
		}
	}
}

func readline(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

//line yacctab:1
var CalExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const CalPrivate = 57344

const CalLast = 7

var CalAct = [...]int{

	4, 5, 7, 6, 3, 2, 1,
}
var CalPact = [...]int{

	-1000, 0, -1000, -5, -1, -2, -1000, -1000,
}
var CalPgo = [...]int{

	0, 6, 5,
}
var CalR1 = [...]int{

	0, 1, 1, 2, 2, 2,
}
var CalR2 = [...]int{

	0, 0, 2, 1, 3, 3,
}
var CalChk = [...]int{

	-1000, -1, -2, 4, 5, 6, 4, 4,
}
var CalDef = [...]int{

	1, -2, 2, 3, 0, 0, 4, 5,
}
var CalTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 3, 6,
}
var CalTok2 = [...]int{

	2, 3, 4,
}
var CalTok3 = [...]int{
	0,
}

var CalErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	CalDebug        = 0
	CalErrorVerbose = false
)

type CalLexer interface {
	Lex(lval *CalSymType) int
	Error(s string)
}

type CalParser interface {
	Parse(CalLexer) int
	Lookahead() int
}

type CalParserImpl struct {
	lval  CalSymType
	stack [CalInitialStackSize]CalSymType
	char  int
}

func (p *CalParserImpl) Lookahead() int {
	return p.char
}

func CalNewParser() CalParser {
	return &CalParserImpl{}
}

const CalFlag = -1000

func CalTokname(c int) string {
	if c >= 1 && c-1 < len(CalToknames) {
		if CalToknames[c-1] != "" {
			return CalToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func CalStatname(s int) string {
	if s >= 0 && s < len(CalStatenames) {
		if CalStatenames[s] != "" {
			return CalStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func CalErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !CalErrorVerbose {
		return "syntax error"
	}

	for _, e := range CalErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + CalTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := CalPact[state]
	for tok := TOKSTART; tok-1 < len(CalToknames); tok++ {
		if n := base + tok; n >= 0 && n < CalLast && CalChk[CalAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if CalDef[state] == -2 {
		i := 0
		for CalExca[i] != -1 || CalExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; CalExca[i] >= 0; i += 2 {
			tok := CalExca[i]
			if tok < TOKSTART || CalExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if CalExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += CalTokname(tok)
	}
	return res
}

func Callex1(lex CalLexer, lval *CalSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = CalTok1[0]
		goto out
	}
	if char < len(CalTok1) {
		token = CalTok1[char]
		goto out
	}
	if char >= CalPrivate {
		if char < CalPrivate+len(CalTok2) {
			token = CalTok2[char-CalPrivate]
			goto out
		}
	}
	for i := 0; i < len(CalTok3); i += 2 {
		token = CalTok3[i+0]
		if token == char {
			token = CalTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = CalTok2[1] /* unknown char */
	}
	if CalDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", CalTokname(token), uint(char))
	}
	return char, token
}

func CalParse(Callex CalLexer) int {
	return CalNewParser().Parse(Callex)
}

func (Calrcvr *CalParserImpl) Parse(Callex CalLexer) int {
	var Caln int
	var CalVAL CalSymType
	var CalDollar []CalSymType
	_ = CalDollar // silence set and not used
	CalS := Calrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Calstate := 0
	Calrcvr.char = -1
	Caltoken := -1 // Calrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Calstate = -1
		Calrcvr.char = -1
		Caltoken = -1
	}()
	Calp := -1
	goto Calstack

ret0:
	return 0

ret1:
	return 1

Calstack:
	/* put a state and value onto the stack */
	if CalDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", CalTokname(Caltoken), CalStatname(Calstate))
	}

	Calp++
	if Calp >= len(CalS) {
		nyys := make([]CalSymType, len(CalS)*2)
		copy(nyys, CalS)
		CalS = nyys
	}
	CalS[Calp] = CalVAL
	CalS[Calp].yys = Calstate

Calnewstate:
	Caln = CalPact[Calstate]
	if Caln <= CalFlag {
		goto Caldefault /* simple state */
	}
	if Calrcvr.char < 0 {
		Calrcvr.char, Caltoken = Callex1(Callex, &Calrcvr.lval)
	}
	Caln += Caltoken
	if Caln < 0 || Caln >= CalLast {
		goto Caldefault
	}
	Caln = CalAct[Caln]
	if CalChk[Caln] == Caltoken { /* valid shift */
		Calrcvr.char = -1
		Caltoken = -1
		CalVAL = Calrcvr.lval
		Calstate = Caln
		if Errflag > 0 {
			Errflag--
		}
		goto Calstack
	}

Caldefault:
	/* default state action */
	Caln = CalDef[Calstate]
	if Caln == -2 {
		if Calrcvr.char < 0 {
			Calrcvr.char, Caltoken = Callex1(Callex, &Calrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if CalExca[xi+0] == -1 && CalExca[xi+1] == Calstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Caln = CalExca[xi+0]
			if Caln < 0 || Caln == Caltoken {
				break
			}
		}
		Caln = CalExca[xi+1]
		if Caln < 0 {
			goto ret0
		}
	}
	if Caln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Callex.Error(CalErrorMessage(Calstate, Caltoken))
			Nerrs++
			if CalDebug >= 1 {
				__yyfmt__.Printf("%s", CalStatname(Calstate))
				__yyfmt__.Printf(" saw %s\n", CalTokname(Caltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Calp >= 0 {
				Caln = CalPact[CalS[Calp].yys] + CalErrCode
				if Caln >= 0 && Caln < CalLast {
					Calstate = CalAct[Caln] /* simulate a shift of "error" */
					if CalChk[Calstate] == CalErrCode {
						goto Calstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if CalDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", CalS[Calp].yys)
				}
				Calp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if CalDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", CalTokname(Caltoken))
			}
			if Caltoken == CalEofCode {
				goto ret1
			}
			Calrcvr.char = -1
			Caltoken = -1
			goto Calnewstate /* try again in the same state */
		}
	}

	/* reduction by production Caln */
	if CalDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Caln, CalStatname(Calstate))
	}

	Calnt := Caln
	Calpt := Calp
	_ = Calpt // guard against "declared and not used"

	Calp -= CalR2[Caln]
	// Calp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Calp+1 >= len(CalS) {
		nyys := make([]CalSymType, len(CalS)*2)
		copy(nyys, CalS)
		CalS = nyys
	}
	CalVAL = CalS[Calp+1]

	/* consult goto table to find next state */
	Caln = CalR1[Caln]
	Calg := CalPgo[Caln]
	Calj := Calg + CalS[Calp].yys + 1

	if Calj >= CalLast {
		Calstate = CalAct[Calg]
	} else {
		Calstate = CalAct[Calj]
		if CalChk[Calstate] != -Caln {
			Calstate = CalAct[Calg]
		}
	}
	// dummy call; replaced with literal code
	switch Calnt {

	case 2:
		CalDollar = CalS[Calpt-2 : Calpt+1]
//line pm.y:18
		{
			fmt.Println(CalVAL, CalDollar[1], CalDollar[2], "exp called")
			CalVAL.val = CalDollar[2].val
			Result = CalDollar[2].val
		}
	case 4:
		CalDollar = CalS[Calpt-3 : Calpt+1]
//line pm.y:25
		{
			fmt.Println(CalVAL, CalDollar[1], CalDollar[3], "add called")
			CalVAL.val = Add(CalDollar[1].val, CalDollar[3].val)
		}
	case 5:
		CalDollar = CalS[Calpt-3 : Calpt+1]
//line pm.y:30
		{
			fmt.Println(CalVAL, CalDollar[1], CalDollar[3], "minus called")
			CalVAL.val = Minus(CalDollar[1].val, CalDollar[3].val)
		}
	}
	goto Calstack /* stack new state and value */
}
